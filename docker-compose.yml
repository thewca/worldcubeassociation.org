x-environment: &env
  RAILS_ENV: development
  DATABASE_HOST: wca_db
  BUNDLE_PATH: /usr/local/bundle/current

x-app: &app
  build:
    dockerfile: Dockerfile.dev
    context: .
  working_dir: /app
  entrypoint: ./entrypoint.dev.sh
  environment:
    <<: *env
  volumes:
    - .:/app
    - gems_volume:/usr/local/bundle
    - node_modules_volume:/app/node_modules
  networks:
    - wca-main

x-app-environment: &appEnv
  <<: *env
  SIDEKIQ_REDIS_URL: redis://wca_redis:6379/1
  MAILCATCHER_SMTP_HOST: wca_mailcatcher

services:
  wca_environment:
    <<: *app
    container_name: "environment"
    environment:
      <<: *env
      DISABLE_SPRING: 1
    command: >
      bash -c './package-install.dev.sh packages.dev.txt &&
      rm -f .db-inited &&
      bin/setup &&
      touch .db-inited'
    healthcheck:
      test: [ "CMD", "test", "-f", ".db-inited" ]
      interval: 5s
      timeout: 2s
      retries: 20
      # Give the container some time to populate the database
      start_period: 15m
    # Tell Docker that it's okay and expected that this container terminates (with exit code 0)
    #   after completing the script listed under `command` above
    restart: no
    depends_on:
      wca_db:
        condition: 'service_healthy'
      wca_redis:
        condition: 'service_started'

  wca_on_rails:
    <<: *app
    container_name: "rails"
    ports:
      - "3000:3000"
    environment:
      <<: *appEnv
      SHAKAPACKER_DEV_SERVER_HOST: wca_webpacker
      CACHE_REDIS_URL: redis://wca_redis:6379/0
    tty: true
    # Start the server and bind to 0.0.0.0 (vs 127.0.0.1) so Docker's port mappings work correctly
    command: bin/rails server -b 0.0.0.0
    depends_on:
      wca_environment:
        condition: service_completed_successfully

  wca_webpacker:
    <<: *app
    container_name: "webpacker"
    ports:
      - "3035:3035"
    environment:
      <<: *appEnv
      SHAKAPACKER_DEV_SERVER_HOST: 0.0.0.0
      NODE_ENV: development
    command: bin/shakapacker-dev-server
    depends_on:
      wca_environment:
        # We need to make sure that the database is populated because our frontend code
        # pulls stuff like WCA Events and Round formats from the DB when compiling assets
        condition: service_completed_successfully

  wca_mailcatcher:
    <<: *app
    container_name: "mailcatcher"
    expose:
      - "1025"
    ports:
      - "1080:1080"
    command: >
      bash -c 'gem install mailcatcher &&
      mailcatcher --foreground --ip=0.0.0.0'

  wca_sidekiq:
    <<: *app
    container_name: 'sidekiq'
    environment:
      <<: *appEnv
      # Cronjobs are disabled in development by default. If you wish to run cronjobs,
      # set this env variable to any integer value greater than zero
      # CRONJOB_POLLING_MINUTES: 30
    command: bin/bundle exec sidekiq
    depends_on:
      wca_environment:
        condition: service_completed_successfully

  wca_db:
    image: mysql:8.0
    container_name: "database"
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "true"
    command: --authentication-policy=mysql_native_password
    ports:
      - "3306:3306"
    volumes:
      - wca_db_volume:/var/lib/mysql
      - ./docker/my.cnf:/etc/my.cnf
    # Suppress unneeded messages via https://stackoverflow.com/a/55706057/2558618
    cap_add:
      - SYS_NICE
    networks:
      - wca-main
    healthcheck:
      test: [ "CMD", "mysql", "-u", "root", "-e", "SELECT 1;" ]
      interval: 5s
      timeout: 5s
      retries: 20

  wca_redis:
    image: redis:7.0-alpine
    container_name: "redis-main"
    expose:
      - "6379"
    command: redis-server --loglevel warning
    volumes:
      - cache_volume:/data
    networks:
      - wca-main

volumes:
  gems_volume:
    driver: local
  node_modules_volume:
    driver: local
  wca_db_volume:
    driver: local
  cache_volume:
    driver: local

networks:
  wca-main:
    name: wca-main
