name: Deployment to Staging

on:
  issue_comment:
    types:
      - created

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Trigger deployment on comment
        id: trigger-deployment
        uses: shanegenschaw/pull-request-comment-trigger@v3.0.0
        with:
          trigger: '@thewca-bot deploy staging'
          reaction: rocket
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout primary branch
        uses: actions/checkout@v4
      - name: Switch to PR branch
        run: gh pr checkout $PR_NUMBER
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.issue.number }}
        if: steps.trigger-deployment.outputs.triggered == 'true'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: steps.trigger-deployment.outputs.triggered == 'true'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.CI_CD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CI_CD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
        if: steps.trigger-deployment.outputs.triggered == 'true'
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        if: steps.trigger-deployment.outputs.triggered == 'true'
      - name: Get the SHA of the current branch/fork
        shell: bash
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
      - name: Build Sidekiq if triggered
        if: steps.trigger-deployment.outputs.triggered == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          target: sidekiq
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/wca-on-rails:sidekiq-staging
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_TAG=${{ env.SHORT_SHA }}
            WCA_LIVE_SITE=false
            SHAKAPACKER_ASSET_HOST=https://assets-staging.worldcubeassociation.org
      - name: Build and push Staging API Image if triggered
        if: steps.trigger-deployment.outputs.triggered == 'true'
        uses: docker/build-push-action@v6
        with:
          push: true
          target: monolith-api
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/wca-on-rails:staging-api
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_TAG=${{ env.SHORT_SHA }}
            WCA_LIVE_SITE=false
            SHAKAPACKER_ASSET_HOST=https://assets-staging.worldcubeassociation.org
      - name: Build Rails if triggered
        if: steps.trigger-deployment.outputs.triggered == 'true'
        id: build-staging
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          load: true
          target: monolith
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/wca-on-rails:staging
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_TAG=${{ env.SHORT_SHA }}
            WCA_LIVE_SITE=false
            SHAKAPACKER_ASSET_HOST=https://assets-staging.worldcubeassociation.org
      # We build assets in docker and copy it out so we don't have to install all the dependencies in the GH Action
      - name: Copy assets out of the container and push to S3 if triggered
        if: steps.trigger-deployment.outputs.triggered == 'true'
        run: |
          id=$(docker create ${{steps.build-staging.outputs.imageid }})
          docker cp $id:/rails/public/ ./assets
          aws s3 sync ./assets "s3://assets-staging.worldcubeassociation.org/assets/${{ env.SHORT_SHA }}"
      - name: Deploy staging if triggered
        if: steps.trigger-deployment.outputs.triggered == 'true'
        run: |
          aws ecs update-service --cluster wca-on-rails --service wca-on-rails-staging --force-new-deployment
          aws ecs update-service --cluster wca-on-rails --service wca-on-rails-staging-API --force-new-deployment
