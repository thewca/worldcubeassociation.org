# i18n-tasks finds and manages missing and unused translations: https://github.com/glebm/i18n-tasks

# The "main" locale.
base_locale: en
## All available locales are inferred from the data by default. Alternatively, specify them explicitly:
# locales: [es, fr]
## Reporting locale, default: en. Available: en, ru.
# internal_locale: en

# Read and write translations.
data:
  ## Translations are read from the file system. Supported format: YAML, JSON.
  ## Provide a custom adapter:
  # adapter: I18n::Tasks::Data::FileSystem

  # Locale files or `File.find` patterns where translations are read from:
  read:
    ## Default:
    - config/locales/%{locale}.yml
    ## More files:
    - config/locales/**/*.%{locale}.yml
    ## Another gem (replace %#= with %=):
    # - "<%#= %x[bundle show vagrant].chomp %>/templates/locales/%{locale}.yml"

  # Locale files to write new keys to, based on a list of key pattern => file rules. Matched from top to bottom:
  # `i18n-tasks normalize -p` will force move the keys according to these rules
  write:
    ## For example, write devise and simple form keys to their respective files:
    # - ['{devise, simple_form}.*', 'config/locales/\1.%{locale}.yml']
    ## Catch-all default:
    # - config/locales/%{locale}.yml

  ## Specify the router (see Readme for details). Valid values: conservative_router, pattern_router, or a custom class.
  # router: convervative_router

  yaml:
    write:
      # do not wrap lines at 80 characters
      line_width: -1

  ## Pretty-print JSON:
  # json:
  #   write:
  #     indent: '  '
  #     space: ' '
  #     object_nl: "\n"
  #     array_nl: "\n"

# Find translate calls
search:
  ## Paths or `File.find` patterns to search in:
  paths:
    - app/
    - lib/

  ## Root directories for relative keys resolution.
  # relative_roots:
  #   - app/controllers
  #   - app/helpers
  #   - app/mailers
  #   - app/presenters
  #   - app/views

  ## Files or `File.fnmatch` patterns to exclude from search. Some files are always excluded regardless of this setting:
  ##   %w(*.jpg *.png *.gif *.svg *.ico *.eot *.otf *.ttf *.woff *.woff2 *.pdf *.css *.sass *.scss *.less *.yml *.json)
  exclude:
    - app/assets/images
    - app/assets/fonts
    - app/webpacker/rails_translations
    # i18n-tasks fails on TNoodle jars and old non-utf8 translations...
    - app/views/regulations/history/files
    - app/views/regulations/scrambles/tnoodle

  ## Alternatively, the only files or `File.fnmatch patterns` to search in `paths`:
  ## If specified, this settings takes priority over `exclude`, but `exclude` still applies.
  # only: ["*.rb", "*.html.slim"]

  ## If `strict` is `false`, guess usages such as t("categories.#{category}.title"). The default is `true`.
  # strict: true

  ## Multiple scanners can be used. Their results are merged.
  ## The options specified above are passed down to each scanner. Per-scanner options can be specified as well.
  ## See this example of a custom scanner: https://github.com/glebm/i18n-tasks/wiki/A-custom-scanner-example

## Google Translate
# translation:
#   # Get an API key and set billing info at https://code.google.com/apis/console to use Google Translate
#   api_key: "AbC-dEf5"

## Do not consider these keys missing:
ignore_missing:
  # Kaminari's keys, they are not prefixed by "kaminari.".
  - 'views.pagination.*'
  # We override devise.failure.(...) without adding the "wca" scope, but we can safely ignore the others
  - 'devise.{mailer,passwords,registrations,sessions,shared,confirmations,unlocks}.*'
# - 'errors.messages.{accepted,blank,invalid,too_short,too_long}'
# - '{devise,simple_form}.*'
  # We don't want to translate these.
  - 'simple_form.hints.translation.*'
  - 'activerecord.attributes.translation.*'

## Consider these keys used:
ignore_unused:
  - 'simple_form.{yes,no}'
  - 'simple_form.{error_notification,required}.:'
  # We iterate through the children, so we use all of them
  - 'users.edit.avatar_guidelines.*'
  - 'users.edit.staff_avatar_guidelines.*'
  - 'faq.answers.*'
  - 'logo.paragraphs.*'
  - 'score_tools.tools.*'
  - 'wca.doorkeeper.scopes.*'
  - 'contact.*.info'
  - 'organizer_guidelines.*'
  # Mark all events/continents/countries/delegate_statuses as used.
  # FYI if a language doesn't translate one of them, it will appear in the missing keys, as long as it exists in English
  - 'events.*'
  - 'continents.*'
  - 'countries.*'
  - 'delegate_statuses.*'
  - 'media.new.media_guidelines.*'
# - 'simple_form.{placeholders,hints,labels}.*'
  - 'faker.name.*'
  - 'devise.mailer.*'
  # These are keys dynamically built in lib/advancement_condition.rb
  - 'advancement_condition.*'
  # The keys below are all used on the records page
  - 'results.selector_elements.show_selector.{mixed,slim,separate,history,mixed_history}'
  # These keys are only used in javascript
  - 'qualification.single.*'
  - 'qualification.average.*'
  - 'regional_organizations.requirements.list.*'
  - 'about.structure.*'

## Exclude these keys from the `i18n-tasks eq-base' report:
# ignore_eq_base:
#   all:
#     - common.ok
#   fr,es:
#     - common.brand

## Ignore these keys completely:
ignore:
## Ignore these keys as they are from external application
  - '{time_will_tell,doorkeeper,mail_form}.*'
## These are in rails.locale.yml
  - '{date, datetime, number, errors, time, support, helpers}.*'
## TODO: if at some point we really care about translating oauth stuff we should
## remove this! But right now ignoring these makes life a lot simpler.
  - '*.doorkeeper/application.*'

## Sometimes, it isn't possible for i18n-tasks to match the key correctly,
## e.g. in case of a relative key defined in a helper method.
## In these cases you can use the built-in PatternMapper to map patterns to keys, e.g.:
#
<%
  require './lib/custom_wca_i18n_scanner.rb'
  I18n::Tasks.add_scanner 'CustomWcaI18nScanner', only: %w(*.erb)

  I18n::Tasks.add_scanner 'I18n::Tasks::Scanners::PatternMapper',
    only: %w(*.js),
    patterns: [['I18nHTMLTranslate\s+i18nKey=%{key}', '%{key}']]
%>
# <%#= I18n::Tasks.add_scanner 'I18n::Tasks::Scanners::PatternMapper',
#        only: %w(*.html.haml *.html.slim),
#        patterns: [['= title\b', '.page_title']] %>
#
# The PatternMapper can also match key literals via a special %{key} interpolation, e.g.:
#
# <%#= I18n::Tasks.add_scanner 'I18n::Tasks::Scanners::PatternMapper',
#        patterns: [['\bSpree\.t[( ]\s*%{key}', 'spree.%{key}']] %>
