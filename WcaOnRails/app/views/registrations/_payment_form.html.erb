<% add_to_packs("auto_numeric") %>
<%= horizontal_simple_form_for :payment, url: "", html: { id: :form_payment } do |f| %>
  <%= render 'entry_fee', label: t('registrations.payment_form.labels.fees_paid'), money_amount: @registration.paid_entry_fees %>
  <%= render 'entry_fee', label: t('registrations.payment_form.labels.fees_remaining'), money_amount: @registration.outstanding_entry_fees %>
  <% if @competition.enable_donations %>
    <%= f.input :show_donation, as: :boolean, label: t('registrations.payment_form.labels.show_donation'), hint: "" %>
    <%= f.input :donation, as: :money_amount, currency: @registration.outstanding_entry_fees.currency.iso_code, value: "0", label: t('registrations.payment_form.labels.donation'), hint: t('registrations.payment_form.hints.donation') %>
  <% end %>
  <div class="form-group">
    <div class="col-sm-offset-2 col-sm-10 text-danger" id="wca-ajax-error">
    </div>
  </div>
  <div id="stripe-elements">
    <div class="form-group" id="group-payment-element">
      <label class="col-sm-2 control-label" for="payment-element"><%= t("registrations.payment_form.labels.payment_information") %></label>
      <div class="col-sm-9">
        <div id="payment-element"></div>
        <p class="help-block"><%= t("registrations.payment_form.hints.payment_information") %></p>
      </div>
    </div>
    <div class="form-group">
      <div class="col-sm-offset-2 col-sm-10 text-danger" id="stripe-sdk-error">
      </div>
    </div>
    <div class="form-group">
      <div class="col-sm-offset-2 col-sm-10">
        <%= f.button :button, t('registrations.payment_confirmation_text'), id: :"payment-button", class: 'btn btn-primary' %>
      </div>
    </div>
  </div>

  <script src="https://js.stripe.com/v3/"></script>
  <script>
    // From https://stripe.com/docs/js/appendix/supported_locales
    var supported_locales = ['ar', 'bg', 'cs', 'da', 'de', 'el', 'en', 'en-GB', 'es', 'es-419', 'et', 'fi', 'fil', 'fr', 'fr-CA', 'he', 'hr', 'hu', 'id', 'it', 'ja', 'ko', 'lt', 'lv', 'ms', 'mt', 'nb', 'nl', 'pl', 'pt-BR', 'pt', 'ro', 'ru', 'sk', 'sl', 'sv', 'th', 'tr', 'vi', 'zh', 'zh-HK', 'zh-TW'];
    var wca_locale = '<%= I18n.locale %>';
    var stripe = Stripe('<%= EnvVars.STRIPE_PUBLISHABLE_KEY %>', {
      locale: supported_locales.includes(wca_locale) ? wca_locale : 'auto',
      stripeAccount: '<%= @competition.connected_stripe_account_id %>',
    });

    // deferred payment (show the PaymentElement without pre-loading a PaymentIntent)
    // as per https://stripe.com/docs/payments/accept-a-payment-deferred?type=payment
    var elements = stripe.elements({
      mode: 'payment',
      amount: <%= StripeTransaction.amount_to_stripe(@registration.outstanding_entry_fees.cents, @competition.currency_code) %>,
      currency: '<%= @competition.currency_code.downcase %>',
      appearance: { theme: 'flat' }
    });

    const paymentElement = elements.create("payment");
    paymentElement.mount("#payment-element");

    var $paymentButton = $('#payment-button');
    $paymentButton.on('click', function(e) {
      e.preventDefault();

      toggleSaving(true);
      createAndSubmitPaymentIntent();
    });

    var $ajaxErrorField = $('#wca-ajax-error');
    $ajaxErrorField.hide();

    var $stripeErrorField = $('#stripe-sdk-error');
    $stripeErrorField.hide();

    var $paymentElementRow = $('#group-payment-element');
    $paymentElementRow.removeClass("has-error");

    var $donationFormRow = $('.payment_donation');
    $donationFormRow.hide();

    var $donationToggle = $('input[name="payment[show_donation]"]');

    var $donationAmountField = $('input[name="payment[donation]"]');
    var $donationInputField = $(`input[data-target="#${$donationAmountField.attr('id')}"]`);

    function toggleSaving(saving) {
      $paymentButton.prop("disabled", saving);
      $paymentButton.toggleClass("saving", saving);

      $donationInputField.prop("disabled", saving);
      $donationInputField.toggleClass("saving", saving);

      if (saving) {
        $ajaxErrorField.hide();
        $stripeErrorField.hide();

        $paymentElementRow.removeClass("has-error");
      }
    }

    async function createAndSubmitPaymentIntent() {
      var amount = getCurrentRubyAmount();

      if (isNaN(amount)) {
        alert('<%= t("registrations.payment_form.alerts.not_a_number") %>');
      } else {
        // Trigger form validation and wallet collection
        const { error } = await elements.submit();

        if (error) {
          handleStripeError(error);
        } else {
          // Fetches a payment intent and captures the client secret
          window.wca.cancelPendingAjaxAndAjax('load-payment-intent', {
            url: '<%= registration_payment_intent_path(@registration) %>',
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: JSON.stringify({ amount: amount }),
            success: submitPaymentIntent,
            error: handleAjaxError,
          });
        }
      }
    }

    async function submitPaymentIntent(data) {
      const { client_secret: clientSecret } = data;

      const { error } = await stripe.confirmPayment({
        elements,
        clientSecret,
        confirmParams: {
          return_url: '<%= registration_payment_completion_url(@registration, host: EnvVars.ROOT_URL) %>',
        }
      });

      if (error) {
        handleStripeError(error);
      }
    }

    async function handleAjaxError(errorData) {
      toggleSaving(false);

      var requestId = errorData.getResponseHeader('X-Request-Id');
      $ajaxErrorField.text(`${errorData.statusText}: ${requestId}`);

      $ajaxErrorField.show();
    }

    function handleStripeError(error) {
      toggleSaving(false);

      $paymentElementRow.addClass("has-error");

      if (error.type === 'card_error' || error.type === 'validation_error') {
        $stripeErrorField.text(error.message);
      } else {
        $stripeErrorField.text('<%= t("registrations.payment_form.errors.stripe_failed") %>');
      }

      $stripeErrorField.show();
    }

    function getCurrentRubyAmount() {
      var registration_fees_to_pay = parseInt('<%= @registration.outstanding_entry_fees.cents %>');

      if ($donationToggle.is(':checked')) {
        var donation = parseInt($donationAmountField.val() || 0);

        return registration_fees_to_pay + donation;
      }

      return registration_fees_to_pay;
    }

    $donationToggle.on('change', function() {
      $donationFormRow.slideToggle(this.checked);
    });

    $donationAmountField.on('change', function() {
      var amount = getCurrentRubyAmount();
      var currencyIso = '<%= @registration.outstanding_entry_fees.currency.iso_code %>';

      window.wca.cancelPendingAjaxAndAjax('refresh-stripe-amount', {
        url: '<%= registration_stripe_denomination_path %>',
        data: { amount: amount, currency_iso: currencyIso },
        success: function (data) {
          const { stripe_amount: stripeAmount } = data;

          elements.update({ amount: stripeAmount });
        },
        error: handleAjaxError,
      });
    });
  </script>
<% end %>
