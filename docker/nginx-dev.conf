upstream app {
  # Name of the WCA service in docker
  server wca_on_rails:3000;
}

server {
  server_name dev.worldcubeassociation.local localhost;

  listen 8080;

  # Deny access to dotfiles and dotfolders.
  location ~ /\. {
    deny all;
  }

  # Redirect 401 to log in page
  # Unfortunately, I don't think there's any way to redirect back after the
  # user logs in.
  error_page 401 = @error401;
    location @error401 {
    return 302 /users/sign_in;
  }

  location /api/v0/auth/results {
    proxy_pass http://app;
    proxy_pass_request_body off;
    proxy_set_header Content-Length "";
    proxy_set_header X-Original-URI $request_uri;
  }

  #### Legacy PHP code
  # /results/admin/ is now handled by Rails over at /admin/
  location ~ ^/results/admin/?$ {
    return 302 /admin/;
  }


  location /results/rankings {
    try_files $uri @app;
  }

  location /results/records {
    try_files $uri @app;
  }

  location /results {
    alias /webroot/results;
    index index.php index.html;

    include fcgi.conf;

    location ^~ /results/admin {
      # Delegate to Rails to determine if the client is authorized to administer
      # results. This is kind of painful, as it results in an extra request for every
      # single request, but this way we can avoid editing the existing PHP code.
      auth_request /api/v0/auth/results;

      include fcgi.conf;
      # Some of our administration scripts take entirely too long to run. Bump
      # the timeout to 10 minutes.
      fastcgi_read_timeout 10m;
    }

    # As recommended by http://docs.phpmyadmin.net/en/latest/setup.html#using-setup-script,
    # prevent access to /libraries and /setup/lib.
    location ^~ /results/admin/phpMyAdmin/libraries {
      deny all;
    }
    location ^~ /results/admin/phpMyAdmin/setup/lib {
      deny all;
    }

    location ^~ /results/includes {
      deny all;
    }

    location ^~ /results/generated {
      deny all;
    }
  }

  #### Regulations
  # This is kind of a mess: we're using Rails to template most, but not all,
  # of the regulations html. We also have static content such as pdfs and images
  # that Rails won't serve up for us. We have a carefully constructed regex here
  # to only serve up files we don't want handled by Rails.
  location ~* /regulations(.*\.pdf|/history/files/.+|/scrambles/tnoodle/.*) {
    index index.html;
    alias /regulations/$1;
  }

  # Redirect /organisations to /organizations
  location /organisations {

    return 302 /organizations;
  }

  #### New Rails sytem
  # From http://unicorn.bogomips.org/examples/nginx.conf
  # path for static files
  root /public;

  # Prefer to serve static files directly from nginx to avoid unnecessary
  # data copies from the application server.
  try_files $uri/index.html $uri.html $uri @app;

  location @app {
    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # set "proxy_buffering off" *only* for Rainbows! when doing
    # Comet/long-poll/streaming.  It's also safe to set if you're using
    # only serving fast clients with Unicorn + nginx, but not slow
    # clients.  You normally want nginx to buffer responses to slow
    # clients, even with Rails 3.1 streaming because otherwise a slow
    # client can become a bottleneck of Unicorn.
    #
    # The Rack application may also set "X-Accel-Buffering (yes|no)"
    # in the response headers do disable/enable buffering on a
    # per-response basis.
    # proxy_buffering off;
    proxy_pass http://app;
  }
  # Rails error pages
  error_page 500 502 503 504 /500.html;
  client_max_body_size 64M;
  keepalive_timeout 10;
}
