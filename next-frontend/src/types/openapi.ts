/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v0/competitions/{competitionId}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get competition details */
        get: operations["competitionById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/competitions/{competitionId}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get competition events in WCIF v0 format */
        get: operations["competitionEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/competitions/{competitionId}/schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get competition schedule in WCIF format */
        get: operations["competitionSchedule"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/competitions/{competitionId}/registrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get competition registrations */
        get: operations["competitionRegistrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/competitions/{competitionId}/podiums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the podium results */
        get: operations["competitionPodiums"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/competition_index": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of (upcoming) competitions for table display */
        get: operations["competitionList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/results/rankings/{event_id}/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the current rankings */
        get: operations["getRankings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/incidents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of incidents */
        get: operations["regulationsList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/persons/{wca_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information for a person */
        get: operations["personByWCAId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/persons/{wca_id}/results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get results for a person */
        get: operations["personResults"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/user_groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user groups */
        get: operations["userGroups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/user_roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user roles */
        get: operations["userRoles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/users/me/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user's permissions */
        get: operations["userPermissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/regulations/translations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets all translations of regulations */
        get: operations["regulationTranslations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/export/public": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Export Information */
        get: operations["publicExports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/known-timezones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of Olson timezones that the backend understands */
        get: operations["knownTimezones"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/regional-organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** A list of currently acknowledged regional organizations */
        get: operations["regionalOrganizations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserAvatar: {
            /**
             * Format: uri
             * @example https://avatars.worldcubeassociation.org/uploads/user/avatar/2099EXAM/1535183030.jpg
             */
            url: string;
            /**
             * Format: uri
             * @example https://avatars.worldcubeassociation.org/uploads/user/avatar/2099EXAM/1535183030_thumb.jpg
             */
            thumb_url?: string;
        };
        TeamMembership: {
            id: number;
            /** @example wst */
            friendly_id: string;
            leader: boolean;
            senior_member: boolean;
            name?: string;
            wca_id?: string;
            avatar?: components["schemas"]["UserAvatar"];
        };
        Person: {
            /** @example 267 */
            id: number;
            /** @example Tim Reynolds */
            name: string;
            /** @example m */
            gender?: string;
            /** @example 2005REYN01 */
            wca_id: string;
            /** @example US */
            country_iso2: string;
            /** @example delegate */
            delegate_status: string;
            teams: components["schemas"]["TeamMembership"][];
            /**
             * Format: uri
             * @example https://www.worldcubeassociation.org/persons/2005REYN01
             */
            url: string;
            avatar: components["schemas"]["UserAvatar"];
        };
        Organizer: components["schemas"]["Person"] & {
            /** @example regional_delegate */
            delegate_status?: string;
            /**
             * Format: email
             * @example 255@worldcubeassociation.org
             */
            email?: string;
            avatar?: components["schemas"]["UserAvatar"];
        };
        CompetitionInfo: {
            /** @example WC2003 */
            id: string;
            /** @example WCA World Championship 2003 */
            name: string;
            /** @example First WCA World Championship */
            information: string;
            /** @example Toronto */
            venue: string;
            /**
             * Format: uri
             * @example https://www.example.com
             */
            contact: string;
            /**
             * Format: date-time
             * @example 2025-01-03T14:00:00.000Z
             */
            registration_open: string;
            /**
             * Format: date-time
             * @example 2025-01-10T14:00:00.000Z
             */
            registration_close: string;
            /** @example true */
            use_wca_registration: boolean;
            /** @example false */
            guests_enabled: boolean;
            /**
             * Format: date-time
             * @example 2024-10-08T22:00:00.000Z
             */
            announced_at: string;
            /** @example 12000 */
            base_entry_fee_lowest_denomination: number;
            /** @example USD */
            currency_code: string;
            /**
             * Format: date
             * @example 2025-07-03
             */
            start_date: string;
            /**
             * Format: date
             * @example 2025-07-06
             */
            end_date: string;
            /** @example false */
            enable_donations: boolean;
            /** @example 2000 */
            competitor_limit: number;
            /** @example  */
            extra_registration_requirements: string;
            /** @example false */
            on_the_spot_registration: boolean;
            /** @example 50 */
            refund_policy_percent: number;
            /**
             * Format: date-time
             * @example 2025-05-15T06:59:00.000Z
             */
            refund_policy_limit_date: string;
            /** @example 1000 */
            guests_entry_fee_lowest_denomination: number;
            /** @example true */
            qualification_results: boolean;
            /** @example false */
            event_restrictions: boolean;
            cancelled_at?: string | null;
            /**
             * Format: date-time
             * @example 2025-05-29T06:59:00.000Z
             */
            waiting_list_deadline_date: string;
            /**
             * Format: date-time
             * @example 2025-05-29T06:59:00.000Z
             */
            event_change_deadline_date: string;
            /** @example not_accepted */
            competitor_can_cancel: string;
            /**
             * Format: uri
             * @example https://www.worldcubeassociation.org/competitions/WC2003
             */
            url: string;
            /**
             * Format: uri
             * @example https://cubingusa.org/worlds
             */
            website: string;
            /** @example Seattle, Washington */
            city: string;
            /** @example 770 Don Mills Rd, North York, ON M3C IT3, Canada */
            venue_address: string;
            /** @example The big convention center */
            venue_details: string;
            /**
             * Format: float
             * @example 47.611387
             */
            latitude_degrees: number;
            /**
             * Format: float
             * @example -122.332554
             */
            longitude_degrees: number;
            /** @example US */
            country_iso2: string;
            /** @example [
             *       "333"
             *     ] */
            event_ids: string[];
            /** @example 333 */
            main_event_id: string;
            /** @example 123 */
            number_of_bookmarks: number;
            "uses_qualification?": boolean;
            /** @example true */
            "registration_full?": boolean;
            delegates: components["schemas"]["Person"][];
            organizers: components["schemas"]["Organizer"][];
        };
        WcifTimeLimit: {
            /** @example 18000 */
            centiseconds: number;
            cumulativeRoundIds: string[];
        };
        WcifAttemptResult: number;
        WcifCutoff: {
            /** @example 2 */
            numberOfAttempts: number;
            attemptResult: components["schemas"]["WcifAttemptResult"];
        };
        WcifRanking: number;
        WcifAdvancementConditionRanking: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ranking";
            level: components["schemas"]["WcifRanking"];
        };
        WcifPercent: number;
        WcifAdvancementConditionPercent: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "percent";
            level: components["schemas"]["WcifPercent"];
        };
        WcifAdvancementConditionAttemptResult: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "attemptResult";
            level: components["schemas"]["WcifAttemptResult"];
        };
        WcifAdvancementCondition: components["schemas"]["WcifAdvancementConditionRanking"] | components["schemas"]["WcifAdvancementConditionPercent"] | components["schemas"]["WcifAdvancementConditionAttemptResult"];
        WcifAttempt: {
            result: components["schemas"]["WcifAttemptResult"];
            reconstruction?: string;
        };
        WcifResult: {
            /** @example 1 */
            personId: number;
            /** @example 10 */
            ranking?: number;
            attempts: components["schemas"]["WcifAttempt"][];
            best: components["schemas"]["WcifAttemptResult"];
            average: components["schemas"]["WcifAttemptResult"];
        };
        WcifScramble: string;
        WcifScrambleSet: {
            /** @example 1 */
            id: number;
            scrambles: components["schemas"]["WcifScramble"][];
            extraScrambles: components["schemas"]["WcifScramble"][];
        };
        WcifRound: {
            /** @example 333-r1 */
            id: string;
            /** @enum {string} */
            format: "1" | "2" | "3" | "a" | "m";
            timeLimit?: components["schemas"]["WcifTimeLimit"];
            cutoff?: components["schemas"]["WcifCutoff"];
            advancementCondition?: components["schemas"]["WcifAdvancementCondition"];
            results: components["schemas"]["WcifResult"][];
            scrambleSetCount: number;
            scrambleSets: components["schemas"]["WcifScrambleSet"][];
            extensions: unknown[];
        };
        WcifQualificationAttemptResult: {
            /** Format: date */
            whenDate: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "attemptResult";
            /** @enum {string} */
            resultType: "single" | "average";
            level: components["schemas"]["WcifAttemptResult"];
        };
        WcifQualificationRanking: {
            /** Format: date */
            whenDate: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ranking";
            /** @enum {string} */
            resultType: "single" | "average";
            level: components["schemas"]["WcifRanking"];
        };
        WcifQualificationAnyResult: {
            /** Format: date */
            whenDate: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "anyResult";
            /** @enum {string} */
            resultType: "single" | "average";
        };
        WcifQualification: components["schemas"]["WcifQualificationAttemptResult"] | components["schemas"]["WcifQualificationRanking"] | components["schemas"]["WcifQualificationAnyResult"];
        WcifEvent: {
            /** @example 333 */
            id: string;
            rounds: components["schemas"]["WcifRound"][];
            competitorLimit?: number;
            qualification?: components["schemas"]["WcifQualification"];
            extensions: unknown[];
        };
        /** @example US */
        WcifCountryCode: string;
        /** @example 333-r1-g1 */
        WcifActivityCode: string;
        WcifActivity: {
            id: number;
            name: string;
            activityCode: components["schemas"]["WcifActivityCode"];
            /** Format: date-time */
            startTime: string;
            /** Format: date-time */
            endTime: string;
            childActivities: components["schemas"]["WcifActivity"][];
            scrambleSetId?: number;
            extensions: unknown[];
        };
        WcifRoom: {
            id: number;
            name: string;
            color: string;
            activities: components["schemas"]["WcifActivity"][];
            extensions: unknown[];
        };
        WcifVenue: {
            id: number;
            name: string;
            latitudeMicrodegrees: number;
            longitudeMicrodegrees: number;
            countryIso2: components["schemas"]["WcifCountryCode"];
            timezone: string;
            rooms: components["schemas"]["WcifRoom"][];
            extensions: unknown[];
        };
        WcifSchedule: {
            /** Format: date */
            startDate: string;
            numberOfDays: number;
            venues: components["schemas"]["WcifVenue"][];
        };
        RegistrationData: {
            id: number;
            competition_id: string;
            user_id: number;
            event_ids: string[];
        };
        Result: {
            id: number;
            pos: number;
            best: number;
            average: number;
            name: string;
            country_iso2: string;
            competition_id: string;
            event_id: string;
            round_type_id: string;
            format_id: string;
            wca_id: string;
            attempts: number[];
            best_index: number;
            worst_index: number;
            regional_single_record: string | null;
            regional_average_record: string | null;
        };
        CompetitionIndex: {
            id: string;
            name: string;
            short_display_name: string;
            /** Format: date */
            start_date: string;
            /** Format: date */
            end_date: string;
            /** Format: date-time */
            registration_open: string;
            /** Format: date-time */
            registration_close: string;
            /** Format: date-time */
            announced_at: string;
            country_iso2: string;
            city: string;
            venue: string;
            /** Format: float */
            latitude_degrees: number;
            /** Format: float */
            longitude_degrees: number;
            event_ids: string[];
            main_event_id: string;
            competitor_limit: number;
            championship_types: string[];
            /** Format: date-time */
            results_submitted_at?: string;
            /** Format: date-time */
            results_posted_at?: string;
            /** Format: date-time */
            report_posted_at?: string;
            report_posted_by_user?: number;
            delegates?: {
                id: number;
                name: string;
                avatar: components["schemas"]["UserAvatar"];
            }[];
        };
        ExtendedResult: {
            type?: string;
            /** @example 6709306 */
            id: number;
            /** @example 1 */
            pos: number;
            /** @example 2019WANY36 */
            person_id: string;
            /** @example Yiheng Wang (王艺衡) */
            person_name: string;
            /** @example China */
            country_id: string;
            /** @example China */
            competition_country_id: string;
            /** @example HangzhouOpen2024 */
            competition_id: string;
            /** @example Hangzhou Open 2024 */
            competition_name: string;
            /** @example 222 */
            event_id: string;
            /** @example 2 */
            round_type_id: string;
            /** @example null */
            round_id: string | null;
            /** @example a */
            format_id: string;
            /** @example 126 */
            value1: number;
            /** @example 84 */
            value2: number;
            /** @example 91 */
            value3: number;
            /** @example 89 */
            value4: number;
            /** @example 85 */
            value5: number;
            /** @example 84 */
            best: number;
            /** @example 88 */
            average: number;
            /** @example null */
            regional_single_record: string | null;
            /** @example WR */
            regional_average_record: string | null;
            /**
             * Format: date-time
             * @example 2024-12-19T13:40:19.000Z
             */
            updated_at: string;
            /** Format: date */
            start_date: string;
            /** @example 88 */
            value: number;
        };
        Incident: {
            id: string;
            title: string;
            private_description?: string;
            public_summary: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            resolved_at: string;
            digest_worthy: boolean;
            /** Format: date-time */
            digest_sent_at?: string;
            /** Format: uri */
            url: string;
            tags: {
                name: string;
                id?: number;
                /** Format: uri */
                url: string;
                content_html: string;
            }[];
            competitions: {
                id: string;
                name: string;
                comments?: string;
            }[];
        };
        Rank: {
            id: number;
            person_id: string;
            event_id: string;
            best: number;
            world_rank: number;
            continent_rank: number;
            country_rank: number;
        };
        Medals: {
            gold: number;
            silver: number;
            bronze: number;
            total: number;
        };
        Records: {
            national: number;
            continental: number;
            world: number;
            total: number;
        };
        SingleAndAverageRank: {
            average: components["schemas"]["Rank"];
            single: components["schemas"]["Rank"];
        };
        PersonInfo: {
            person: components["schemas"]["Person"];
            previous_persons?: Record<string, never>[];
            ranks_single?: components["schemas"]["Rank"][];
            ranks_average?: components["schemas"]["Rank"][];
            medals: components["schemas"]["Medals"];
            records: components["schemas"]["Records"];
            personal_records: {
                [key: string]: components["schemas"]["SingleAndAverageRank"];
            };
            championship_podiums: {
                world?: Record<string, never>[];
                continental?: Record<string, never>[];
                greater_china?: Record<string, never>[];
                national?: Record<string, never>[];
            };
            competition_count: number;
        };
        Results: components["schemas"]["Result"][];
        UserGroup: {
            id: number;
            name: string;
            group_type: string;
            parent_group_id?: number | null;
            is_active: boolean;
            is_hidden: boolean;
            metadata_id?: number | null;
            metadata_type?: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            lead_user?: components["schemas"]["Person"];
            metadata?: {
                id?: number;
                status?: string;
                /** Format: date-time */
                created_at?: string;
                /** Format: date-time */
                updated_at?: string;
                /** Format: email */
                email?: string;
                preferred_contact_mode?: string;
                friendly_id?: string;
            };
        };
        UserRole: {
            id: number;
            /** Format: date */
            start_date: string;
            /** Format: date */
            end_date: string | null;
            group: components["schemas"]["UserGroup"];
            user: components["schemas"]["Person"];
            metadata: {
                id?: number;
                status?: string;
                /** Format: date-time */
                created_at?: string;
                /** Format: date-time */
                updated_at?: string;
                /** Format: email */
                email?: string;
            };
            class?: string;
        };
        CompetitionPermissions: string[] | string;
        UserPermissions: {
            can_attend_competitions: {
                scope: components["schemas"]["CompetitionPermissions"];
                /** Format: date-time */
                until?: string | null;
            };
            can_organize_competitions: {
                scope: components["schemas"]["CompetitionPermissions"];
            };
            can_administer_competitions: {
                scope: components["schemas"]["CompetitionPermissions"];
            };
            can_view_delegate_admin_page: {
                scope: components["schemas"]["CompetitionPermissions"];
            };
            can_view_delegate_report: {
                scope: components["schemas"]["CompetitionPermissions"];
            };
            can_edit_delegate_report: {
                scope: components["schemas"]["CompetitionPermissions"];
            };
            can_create_groups: {
                scope: string[];
            };
            can_read_groups_current: {
                scope: string[];
            };
            can_read_groups_past: {
                scope: string[];
            };
            can_edit_groups: {
                scope: string[];
            };
            can_access_panels: {
                scope: string[];
            };
            can_request_to_edit_others_profile: {
                scope: string[] | string;
            };
        };
        Translation: {
            version: string;
            language: string;
            language_english: string;
            url: string;
        };
        RegulationsTranslations: {
            current: components["schemas"]["Translation"][];
            outdated: components["schemas"]["Translation"][];
        };
        ExportInfo: {
            /** Format: date */
            export_date: string;
            /** Format: uri */
            sql_url: string;
            sql_filesize_bytes: number;
            /** Format: uri */
            tsv_url: string;
            tsv_filesize_bytes: number;
            readme: string;
            /** Format: uri */
            developer_url?: string;
        };
        RegionalOrganization: {
            name: string;
            country_iso2: string;
            website: string;
            /** Format: uri */
            logo_url?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    competitionById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                competitionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompetitionInfo"];
                };
            };
        };
    };
    competitionEvents: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                competitionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WcifEvent"][];
                };
            };
        };
    };
    competitionSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                competitionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WcifSchedule"];
                };
            };
        };
    };
    competitionRegistrations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                competitionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegistrationData"][];
                };
            };
        };
    };
    competitionPodiums: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                competitionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Result"][];
                };
            };
        };
    };
    competitionList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompetitionIndex"][];
                };
            };
        };
    };
    getRankings: {
        parameters: {
            query?: {
                region?: string;
                show?: string;
                gender?: string;
            };
            header?: never;
            path: {
                type: string;
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved rankings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        rankings: components["schemas"]["ExtendedResult"][];
                        /** Format: date */
                        timestamp: string;
                    };
                };
            };
        };
    };
    regulationsList: {
        parameters: {
            query?: {
                q?: string;
                tags?: string;
                page?: number;
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Incident"][];
                };
            };
        };
    };
    personByWCAId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                wca_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonInfo"];
                };
            };
        };
    };
    personResults: {
        parameters: {
            query?: {
                event_id?: string;
            };
            header?: never;
            path: {
                wca_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Results"];
                };
            };
        };
    };
    userGroups: {
        parameters: {
            query?: {
                /** @description Filter by whether the group is active */
                isActive?: boolean;
                /** @description Filter by whether the group is hidden */
                isHidden?: boolean;
                /** @description Filter by group type (e.g., "officers") */
                groupType?: string;
                /** @description Sort by a specific field (e.g., "start_date", "-created_at") */
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of user groups */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserGroup"][];
                };
            };
        };
    };
    userRoles: {
        parameters: {
            query?: {
                /** @description Filter by whether the group is active */
                isActive?: boolean;
                /** @description Filter by whether the group is hidden */
                isGroupHidden?: boolean;
                /** @description Filter by user ID */
                userId?: number;
                /** @description Filter by group ID */
                groupId?: number;
                /** @description Filter by metadata status (e.g., "chair") */
                status?: string;
                /** @description Filter by group type (e.g., "officers") */
                groupType?: string;
                /** @description Filter by parent Group */
                parentGroupId?: number;
                /** @description Filter by whether the user is the lead of the group */
                isLead?: boolean;
                /** @description Sort by a specific field (e.g., "start_date", "-created_at") */
                sort?: string;
                /** @description Number of results per page */
                perPage?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of user roles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRole"][];
                };
            };
        };
    };
    userPermissions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved permissions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPermissions"];
                };
            };
        };
    };
    regulationTranslations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegulationsTranslations"];
                };
            };
        };
    };
    publicExports: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved exports */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExportInfo"];
                };
            };
        };
    };
    knownTimezones: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    regionalOrganizations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieved organizations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegionalOrganization"][];
                };
            };
        };
    };
}
