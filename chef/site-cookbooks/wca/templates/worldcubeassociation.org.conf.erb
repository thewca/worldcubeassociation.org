upstream app {
<% if @rails_env == "development" %>
  server localhost:3000;
  # Backup in case we try to run in production mode on a dev server
  server unix:/tmp/unicorn.wca.sock fail_timeout=0 backup;
<% else %>
  # Path to Unicorn SOCK file
  server unix:/tmp/unicorn.wca.sock fail_timeout=0;
<% end %>
}

<% if node.chef_environment == "staging" %>
  # Serve mailcatcher at https://staging.worldcubeassociation.org:444
  server {
    server_name staging.worldcubeassociation.org;

    listen 444 ssl;
    include wca_https.conf;

    location / {
      proxy_pass http://localhost:1080;
    }
  }
<% end %>

server {
  server_name <%= @server_name %> localhost;

<% if @rails_env == "development" %>
  # Using sendfile isn't reliable in VirtualBox. See:
  #  http://wiki.nginx.org/Pitfalls#VirtualBox
  sendfile off;
<% end %>

<% if @https %>
  listen 443 ssl;
  include wca_https.conf;
<% else %>
  <% if @rails_env == "development" %>
    # In development, we're running behind Vagrant's proxy (host port 2331).
    # If we run nginx on a different port (say 80), then when nginx sends redirects,
    # they will be to port 80, which doesn't work from outside the vm.
    listen 2331;
  <% else %>
    listen 80;
  <% end %>
<% end %>

  # Deny access to dotfiles and dotfolders.
  location ~ /\. {
    deny all;
  }

  # Override above rule for HTTPS certificate renewal.
  location ^~ /.well-known/ {
    allow all;
  }

  # Redirect 401 to log in page
  # Unfortunately, I don't think there's any way to redirect back after the
  # user logs in.
  error_page 401 = @error401;
    location @error401 {
    return 302 /users/sign_in;
  }

  location /api/v0/auth/results {
    proxy_pass http://app;
    proxy_pass_request_body off;
    proxy_set_header Content-Length "";
    proxy_set_header X-Original-URI $request_uri;
  }

  #### Legacy PHP code
  # /results/admin/ is now handled by Rails over at /admin/
  location ~ ^/results/admin/?$ {
    return 302 /admin/;
  }

  # Redirect competitions.php to /competitions
  location /results/competitions.php {
    set $rails_args "";

    if ($arg_map != "") {
      set $rails_args "${rails_args}&display=Map";
    }

    if ($arg_eventId != "") {
      set $rails_args "${rails_args}&event=${arg_eventId}";
    }

    if ($arg_regionId != "") {
      set $rails_args "${rails_args}&region=${arg_regionId}";
    }

    if ($arg_pattern != "") {
      set $rails_args "${rails_args}&search=${arg_pattern}";
    }

    if ($arg_years != "") {
      set $rails_args "${rails_args}&years=${arg_years}";
    }

    return 302 /competitions?$rails_args;
  }

  # Redirect statistics.php to the new statistics project
  location /results/statistics.php {
    return 302 https://statistics.worldcubeassociation.org/statistics-list;
  }

  # Redirect sum of ranks
  location /results/misc/sum_of_ranks/ {
    return 302 https://statistics.worldcubeassociation.org/sum-of-ranks;
  }

  # Redirect record evolution
  location /results/misc/evolution/ {
    return 302 https://statistics.worldcubeassociation.org/record-evolution;
  }

  # Redirect old competition results pages:
  #  /results/c.php?i=IranSummerCube2013
  # to:
  #  /results/competition.php?i=IranSummerCube2013
  # to new Rails page:
  #  /competitions/IranSummerCube2013
  location /results/c.php {
    return 302 /results/competition.php$is_args$args;
  }
  location /results/competition.php {
    # The competition id could be in the url parameter "competitionId" or "i".
    if ($arg_competitionId = "") {
      set $competitionId $arg_i;
    }
    if ($arg_competitionId != "") {
      set $competitionId $arg_competitionId;
    }

    # Be liberal in how we accept spaces.
    # Yes, that's competitiors, not competitors.
    if ($arg_list = "List of Registered Competitiors") {
      return 302 /competitions/$competitionId/registrations;
    }
    if ($arg_list = "List+of+Registered+Competitiors") {
      return 302 /competitions/$competitionId/registrations;
    }
    if ($arg_list = "List%20of%20Registered%20Competitiors") {
      return 302 /competitions/$competitionId/registrations;
    }

    if ($arg_form = "Registration Form") {
      return 302 /competitions/$competitionId/register;
    }
    if ($arg_form = "Registration+Form") {
      return 302 /competitions/$competitionId/register;
    }
    if ($arg_form = "Registration%20Form") {
      return 302 /competitions/$competitionId/register;
    }

    return 302 /competitions/$competitionId;
  }

  # Redirect old media pages
  location /results/media_insertion.php {
    return 302 /media/new;
  }
  location /results/media.php {
    return 302 /media/;
  }

  # Redirect /results/e.php to /results/events.php
  location /results/e.php {
    if ($arg_eventId = "") {
      set $args "${args}&eventId=${arg_i}";
    }
    return 302 /results/events.php$is_args$args;
  }
  # Redirect /results/events.php to /results/rankings
  location /results/events.php {
    set $rails_path "333";
    set $rails_args "";

    if ($arg_eventId != "") {
      set $rails_path $arg_eventId;
    }

    if ($arg_single != "") {
      set $rails_path "${rails_path}/single";
    }
    if ($arg_average != "") {
      set $rails_path "${rails_path}/average";
    }

    if ($arg_regionId != "") {
      set $rails_args "${rails_args}&region=${arg_regionId}";
    }

    if ($arg_years != "") {
      set $rails_args "${rails_args}&years=${arg_years}";
    }

    if ($arg_show != "") {
      set $rails_args "${rails_args}&show=${arg_show}";
    }

    return 302 /results/rankings/$rails_path?$rails_args;
  }

  location /results/rankings {
    try_files $uri @app;
  }

  # Redirect /results/regions.php to /results/records
  location /results/regions.php {
    set $rails_args "";

    if ($arg_eventId != "") {
      set $rails_args "${rails_args}&event_id=${arg_eventId}";
    }

    if ($arg_regionId != "") {
      set $rails_args "${rails_args}&region=${arg_regionId}";
    }

    if ($arg_years != "") {
      set $rails_args "${rails_args}&years=${arg_years}";
    }

    if ($arg_mixed != "") {
      set $rails_args "${rails_args}&show=mixed";
    }
    if ($arg_slim != "") {
      set $rails_args "${rails_args}&show=slim";
    }
    if ($arg_separate != "") {
      set $rails_args "${rails_args}&show=separate";
    }
    if ($arg_history != "") {
      set $rails_args "${rails_args}&show=history";
    }
    if ($arg_mixHist != "") {
      set $rails_args "${rails_args}&show=mixed history";
    }

    return 302 /results/records?$rails_args;
  }

  location /results/records {
    try_files $uri @app;
  }

  location /results {
    alias <%= @repo_root %>/webroot/results;
    index index.php index.html;

    include fcgi.conf;

    location ^~ /results/admin {
      # Delegate to Rails to determine if the client is authorized to administer
      # results. This is kind of painful, as it results in an extra request for every
      # single request, but this way we can avoid editing the existing PHP code.
      auth_request /api/v0/auth/results;

      include fcgi.conf;
      # Some of our administration scripts take entirely too long to run. Bump
      # the timeout to 10 minutes.
      fastcgi_read_timeout 10m;
    }

    # As recommended by http://docs.phpmyadmin.net/en/latest/setup.html#using-setup-script,
    # prevent access to /libraries and /setup/lib.
    location ^~ /results/admin/phpMyAdmin/libraries {
      deny all;
    }
    location ^~ /results/admin/phpMyAdmin/setup/lib {
      deny all;
    }

    location ^~ /results/includes {
      deny all;
    }

    location ^~ /results/generated {
      deny all;
    }
  }

  # Redirect /results/admin/change_person.php to /admin/edit_person
  location /results/admin/change_person.php {
    return 302 /admin/edit_person;
  }

  # Redirect /results/persons.php to /persons
  location /results/persons.php {
    set $rails_args "";

    if ($arg_regionId != "") {
      set $rails_args "${rails_args}&region=${arg_regionId}";
    }

    if ($arg_pattern != "") {
      set $rails_args "${rails_args}&search=${arg_pattern}";
    }

    return 302 /persons?$rails_args;
  }

  # Redirect /results/person.php to /person
  location /results/person.php {
    return 302 /persons/$arg_personId;
  }

  # Redirect /results/p.php to /person
  location /results/p.php {
    if ($arg_personId = "") {
      set $arg_personId $arg_i;
    }
    return 302 /persons/$arg_personId;
  }

  # Redirect /results/person_map.php to /person
  location /results/person_map.php {
    return 302 /persons/$arg_i?tab=map;
  }

  # phpBB forum redirects

  location /forum {
    return 302 /archive/forums;
  }

  location /forum/viewforum.php {
    return 302 /archive/forums/$arg_f;
  }

  location /forum/viewtopic.php {
    return 302 /archive/forum_topics/$arg_t;
  }

  #### Regulations
  # This is kind of a mess: we're using Rails to template most, but not all,
  # of the regulations html. We also have static content such as pdfs and images
  # that Rails won't serve up for us. We have a carefully constructed regex here
  # to only serve up files we don't want handled by Rails.
  location ~* /regulations(.*\.pdf|/history/files/.+|/scrambles/tnoodle/.*) {
    index index.html;
    alias <%= @repo_root %>/WcaOnRails/app/views/regulations/$1;
  }

  # Redirect /organisations to /organizations
  location /organisations {

    return 302 /organizations;
  }

  #### New Rails sytem
  # From http://unicorn.bogomips.org/examples/nginx.conf
  # path for static files
  root <%= @rails_root %>/public;

<% if @rails_env != "development" %>
  # http://vladigleba.com/blog/2014/03/27/deploying-rails-apps-part-4-configuring-nginx/
  location ~* /(assets|packs)/ {
    # From http://stackoverflow.com/a/5132440 (with tweaks by jfly)
    gzip_static on;
    gzip_vary on;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/javascript text/xml application/xml application/rss+xml application/atom+xml application/rdf+xml image/svg+xml;

    expires max;
    add_header Cache-Control public;

    # Fonts need the Access-Control-Allow-Origin header.
    add_header Access-Control-Allow-Origin *;
  }
<% end %>
  # Prefer to serve static files directly from nginx to avoid unnecessary
  # data copies from the application server.
  try_files $uri/index.html $uri.html $uri @app;

  location @app {
    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if you forward HTTPS traffic to unicorn,
    # this helps Rack set the proper URL scheme for doing redirects:
    proxy_set_header X-Forwarded-Proto $scheme;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # set "proxy_buffering off" *only* for Rainbows! when doing
    # Comet/long-poll/streaming.  It's also safe to set if you're using
    # only serving fast clients with Unicorn + nginx, but not slow
    # clients.  You normally want nginx to buffer responses to slow
    # clients, even with Rails 3.1 streaming because otherwise a slow
    # client can become a bottleneck of Unicorn.
    #
    # The Rack application may also set "X-Accel-Buffering (yes|no)"
    # in the response headers do disable/enable buffering on a
    # per-response basis.
    # proxy_buffering off;
    proxy_pass http://app;
  }
  # Rails error pages
  error_page 500 502 503 504 /500.html;
  client_max_body_size 64M;
  keepalive_timeout 10;
}

<% if @https %>
server {
  listen 80;
  server_name <%= @server_name.sub(/^www\./, '') %> localhost;

  return 301 https://$server_name$request_uri;
}
<% if @server_name.start_with? "www." %>
# Redirect naked domain HTTPS traffic to HTTPS on www....
server {
  server_name <%= @server_name.sub(/^www\./, '') %>;

  listen 443 ssl;
  include wca_https.conf;

  return 301 https://www.$server_name$request_uri;
}
<% end %>
<% end %>
